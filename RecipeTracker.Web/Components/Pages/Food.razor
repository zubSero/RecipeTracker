@page "/food"
@using RecipeTracker.Web.API
@using RecipeTracker.Web.API.Models
@using RecipeTracker.Web.API.Translations.Interface
@inject TheMealDbApiClient ApiClient
@inject ITranslationService TranslationService
@rendermode InteractiveServer

<PageTitle>@_translations["Food.PageTitle"]</PageTitle>

<h3>@_translations["Food.PageTitle"]</h3>

<div class="search-bar">
    <input type="text" @bind="_query" placeholder="@_translations["Food.SearchPrompt"]" class="search-input" />
    <button @onclick="SearchRecipes" class="search-button">@_translations["Food.SearchButton"]</button>
</div>

@if (_meals == null)
{
    <p>@_translations["Food.Loading"]</p>
}
else if (_meals.Count == 0)
{
    <p>@_translations["Food.NoRecipesFound"]</p>
}
else
{
    <div class="recipe-cards grid-container">
        @foreach (var meal in _meals)
        {
            <div class="card">
                <img src="@(string.IsNullOrEmpty(meal.StrMealThumb) ? "default-image.jpg" : meal.StrMealThumb)" alt="Meal Image" class="card-image" />

                <h4>@(meal.StrMeal ?? _translations["Food.UnknownMeal"])</h4>

                <p><strong>@_translations["Food.Category"]</strong> @(string.IsNullOrEmpty(meal.StrCategory) ? _translations["Food.Unknown"] : meal.StrCategory)</p>
                <p><strong>@_translations["Food.Area"]</strong> @(string.IsNullOrEmpty(meal.StrArea) ? _translations["Food.Unknown"] : meal.StrArea)</p>

                <p><strong>@_translations["Food.Instructions"]</strong></p>
                <p>
                    @(meal is { StrInstructions.Length: > 150, ShowFullInstructions: false }
                        ? meal.StrInstructions[..150] + "..."
                        : meal.StrInstructions)
                </p>
                <button @onclick="() => ToggleInstructions(meal)">
                    @(meal.ShowFullInstructions ? _translations["Food.ShowLess"] : _translations["Food.ShowMore"])
                </button>

                <h5>@_translations["Food.Ingredients"]</h5>
                <ul>
                    @for (var i = 0; i < meal.Ingredients.Count; i++)
                    {
                        <li>@meal.Ingredients[i] - @meal.Measures[i]</li>
                    }
                </ul>

                <a href="@meal.StrYoutube" target="_blank" class="youtube-link">@_translations["Food.WatchOnYouTube"]</a>
            </div>
        }
    </div>
}

@code {
	private string _query = string.Empty;
	private List<Meal> _meals = [];
	private Dictionary<string, string> _translations = new();

	protected override async Task OnInitializedAsync()
	{
		var keys = new[]
		{
			"Food.PageTitle", "Food.SearchPrompt", "Food.SearchButton", "Food.Loading", "Food.NoRecipesFound",
			"Food.UnknownMeal", "Food.Category", "Food.Area", "Food.Instructions", "Food.ShowMore",
			"Food.ShowLess", "Food.Ingredients", "Food.WatchOnYouTube", "Food.Unknown"
		};

		_translations = await TranslationService.GetTranslationsAsync("en", keys);
	}

	private async Task SearchRecipes()
	{
		var response = await ApiClient.GetRecipesAsync(_query);
		if (response?.Meals != null)
		{
			_meals = response.Meals;
			foreach (var meal in _meals)
			{
				meal.ShowFullInstructions = false;
			}
		}
		else
		{
			_meals = [];
		}
	}

	private void ToggleInstructions(Meal meal)
	{
		meal.ShowFullInstructions = !meal.ShowFullInstructions;
	}
}
