@page "/food"
@using System.Text.Json
@using RecipeTracker.Web.API
@using RecipeTracker.Web.API.Models
@using RecipeTracker.Web.Components.buildingBlocks
@inject Dictionary<string, Dictionary<string, string>> TranslationsCache
@inject TheMealDbApiClient ApiClient
@rendermode InteractiveServer

<PageTitle>@TranslationsCache["en"]["Food.PageTitle"]</PageTitle>

<h3>@TranslationsCache["en"]["Food.PageTitle"]</h3>

<SearchBar Query="@_query"
           OnSearch="@SearchRecipes"
           IsLoading="@_isLoading"
           Translations="@TranslationsCache["en"]" />

@if (_errorMessage != null)
{
    <p class="error-message">@_errorMessage</p>
}
else if (_meals == null)
{
    <p>@TranslationsCache["en"]["Food.Loading"]</p>
}
else if (_meals.Count == 0)
{
    <p>@TranslationsCache["en"]["Food.NoRecipesFoundMessage"]</p>
}
else
{
    <div class="recipe-cards grid-container">
        @foreach (var meal in _meals)
        {
            <RecipeCard Meal="meal" Translations="@TranslationsCache["en"]" />
        }
    </div>
}

@code {
    private string _query = string.Empty; // User input for search
    private List<Meal> _meals = []; // Meal results from API
    private string? _errorMessage; // Error message for the user
    private bool _isLoading; // Loading state for the search process

    private async Task SearchRecipes(string query)
    {
	    if (_isLoading) return;

	    _isLoading = true;
	    StateHasChanged(); // Trigger UI update for loading state

	    try
	    {
		    var response = await ApiClient.GetRecipesAsync(query);

		    if (response?.Meals != null)
		    {
			    _meals.Clear();

			    foreach (var meal in response.Meals)
			    {
				    meal.InitializeDetailsFromJson(JsonSerializer.SerializeToElement(meal));
				    _meals.Add(meal);
			    }
			    _errorMessage = null;
		    }
		    else
		    {
			    // Show "No recipes found" message if no results
			    _meals = new List<Meal>();
			    _errorMessage = TranslationsCache["en"]["Food.NoRecipesFoundMessage"];
		    }
	    }
	    catch (Exception ex)
	    {
		    // Handle any errors and log them
		    _errorMessage = TranslationsCache["en"]["Food.ErrorOccurred"];
		    Console.Error.WriteLine(ex);
	    }
	    finally
	    {
		    _isLoading = false;
		    StateHasChanged(); // Trigger UI update after search completion
	    }
    }

}
