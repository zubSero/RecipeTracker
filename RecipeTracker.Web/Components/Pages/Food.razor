@page "/food"
@using System.Text.Json
@using RecipeTracker.ApiService.Models.Internal  
@using RecipeTracker.Web.Components.buildingBlocks
@inject Dictionary<string, Dictionary<string, string>> TranslationsCache
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer

<PageTitle>@TranslationsCache["en"]["Food.PageTitle"]</PageTitle>

<h3>@TranslationsCache["en"]["Food.PageTitle"]</h3>

<SearchBar Query="@_query"
           OnSearch="@SearchRecipes"
           IsLoading="@_isLoading"
           Translations="@TranslationsCache["en"]" />

@if (_errorMessage != null)
{
    <p class="error-message">@_errorMessage</p>
}
else if (_recipes == null)
{
    <p>@TranslationsCache["en"]["Food.Loading"]</p>
}
else if (_recipes.Count == 0)
{
    <p>@TranslationsCache["en"]["Food.NoRecipesFoundMessage"]</p>
}
else
{
    <div class="recipe-cards grid-container">
        @foreach (var recipe in _recipes)
        {
            <RecipeCard Recipe="recipe" Translations="@TranslationsCache["en"]" />
        }
    </div>
}

@code {
    private string _query = string.Empty;    // User input for search
    // Changed from _meals (List<Meal>) to _recipes (List<RecipeModel>)
    private List<RecipeModel> _recipes = new();
    private string? _errorMessage;             // Error message for the user
    private bool _isLoading;                   // Loading state for the search process

    private async Task SearchRecipes(string query)
    {
        if (_isLoading) return;

        _isLoading = true;
        StateHasChanged(); // Trigger UI update for loading state

        try
        {
	        var client = ClientFactory.CreateClient("ApiHost");
	        var url = $"/api/recipes?query={Uri.EscapeDataString(query)}";
	        var recipes = await client.GetFromJsonAsync<List<RecipeModel>>(url);

            if (recipes != null && recipes.Any())
            {
                _recipes = recipes;
                _errorMessage = null;
            }
            else
            {
                _recipes = [];
                _errorMessage = TranslationsCache["en"]["Food.NoRecipesFoundMessage"];
            }
        }
        catch (Exception ex)
        {
            _errorMessage = TranslationsCache["en"]["Food.ErrorOccurred"];
            Console.Error.WriteLine(ex);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged(); // Trigger UI update after search completion
        }
    }
}
