@page "/food"
@using System.Text.Json
@using RecipeTracker.Web.API
@using RecipeTracker.Web.API.Models
@using RecipeTracker.Web.API.Translations.Interface
@inject ITranslationService TranslationService
@inject TheMealDbApiClient ApiClient
@rendermode InteractiveServer

<PageTitle>@GetTranslation("Food.PageTitle")</PageTitle>

<h3>@GetTranslation("Food.PageTitle")</h3>

<div class="search-bar">
    <input type="text" @bind="_query" placeholder="@GetTranslation("Food.SearchPrompt")"
           class="search-input" @onkeydown="HandleKeyPress" aria-label="Search recipes" />
    <button @onclick="SearchRecipes" class="search-button" disabled="@_isLoading" aria-label="Start search">
        @(_isLoading ? GetTranslation("Food.Loading") : GetTranslation("Food.SearchButton"))
    </button>
</div>

@if (_errorMessage != null)
{
    <p class="error-message">@_errorMessage</p>
}
else if (_meals == null)
{
    <p>@GetTranslation("Food.Loading")</p>
}
else if (_meals.Count == 0)
{
    <p>@GetTranslation("Food.NoRecipesFound")</p>
}
else
{
    <div class="recipe-cards grid-container">
        @foreach (var meal in _meals)
        {
            <div class="card">
                <img src="@(string.IsNullOrEmpty(meal.StrMealThumb) ? "default-image.jpg" : meal.StrMealThumb)"
                     alt="Meal Image" class="card-image" loading="lazy" />

                <h4>@(meal.StrMeal ?? GetTranslation("Food.UnknownMeal"))</h4>

                <p><strong>@GetTranslation("Food.Category")</strong> @(string.IsNullOrEmpty(meal.StrCategory) ? GetTranslation("Food.Unknown") : meal.StrCategory)</p>
                <p><strong>@GetTranslation("Food.Area")</strong> @(string.IsNullOrEmpty(meal.StrArea) ? GetTranslation("Food.Unknown") : meal.StrArea)</p>

                <p><strong>@GetTranslation("Food.Instructions")</strong></p>
                <p>
                    @(meal is { StrInstructions.Length: > 150, ShowFullInstructions: false }
                        ? meal.StrInstructions[..150] + "..."
                        : meal.StrInstructions)
                </p>
                <button @onclick="() => ToggleInstructions(meal)">
                    @(meal.ShowFullInstructions ? GetTranslation("Food.ShowLess") : GetTranslation("Food.ShowMore"))
                </button>

                <h5>@GetTranslation("Food.Ingredients")</h5>
                <ul>
                    @foreach (var i in meal.MealDetails.Ingredients.Keys)
                    {
                        <li>@meal.MealDetails.Ingredients[i] - @meal.MealDetails.Measures.GetValueOrDefault(i, "")</li>
                    }
                </ul>

                <a href="@meal.StrYoutube" target="_blank" class="youtube-link">@GetTranslation("Food.WatchOnYouTube")</a>
            </div>
        }
    </div>
}

@code {
    private string _query = string.Empty;
    private List<Meal> _meals = new();
    private string? _errorMessage;
    private bool _isLoading = false;
    private Dictionary<string, string> _translations = new();

    protected override async Task OnInitializedAsync()
    {
        _translations = await TranslationService.GetAllTranslationsAsync("en");
    }

    private async Task SearchRecipes()
    {
        _isLoading = true;
        try
        {
            var response = await ApiClient.GetRecipesAsync(_query);

            if (response?.Meals != null)
            {
                _meals.Clear();

                foreach (var meal in response.Meals)
                {
                    meal?.InitializeDetailsFromJson(JsonSerializer.SerializeToElement(meal));
                    if (meal != null)
                    {
                        _meals.Add(meal);
                    }
                }
                _errorMessage = null;
            }
            else
            {
                _meals = new List<Meal>();
                _errorMessage = GetTranslation("Food.NoRecipesFound");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = GetTranslation("Food.ErrorOccurred");
            Console.Error.WriteLine(ex);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ToggleInstructions(Meal meal)
    {
        meal.ShowFullInstructions = !meal.ShowFullInstructions;
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchRecipes();
        }
    }

    private string GetTranslation(string key)
    {
        return _translations.GetValueOrDefault(key, "Not Found");
    }
}
