@rendermode InteractiveServer
@using RecipeTracker.ApiService.Models.Internal
<article class="card">
    <figure>
        <img src="@(Recipe?.Thumbnail ?? "default-image.jpg")"
             alt="@(Recipe?.Name ?? Translations["Food.UnknownMealName"])" loading="lazy" />
    </figure>

    <div>
        <h4>@(Recipe?.Name ?? Translations["Food.UnknownMealName"])</h4>

        <p>
            <strong>@Translations["Food.MealCategory"]:</strong>
            @(Recipe?.Category ?? Translations["Food.UnknownCategory"])
        </p>
        <p>
            <strong>@Translations["Food.MealArea"]:</strong>
            @(Recipe?.Area ?? Translations["Food.UnknownCategory"])
        </p>

        <p>
            @(Recipe is { Instructions.Length: > 150, ShowFullInstructions: false }
                ? Recipe.Instructions[..150] + "..."
                : Recipe?.Instructions ?? Translations["Food.NoInstructionsAvailable"])
        </p>

        <button @onclick="ToggleInstructions">
            @(Recipe?.ShowFullInstructions == true
                ? Translations["Food.ShowLessInstructions"]
                : Translations["Food.ShowMoreInstructions"])
        </button>

        @if (Recipe?.Ingredients?.Any() == true)
        {
            <h5>@Translations["Food.IngredientsSection"]</h5>
            <ul>
                @foreach (var item in Recipe.Ingredients)
                {
                    <li>@item.Ingredient - @item.Measure</li>
                }
            </ul>
        }

        @if (!string.IsNullOrEmpty(Recipe?.Youtube))
        {
            <a href="@Recipe.Youtube" target="_blank">
                @Translations["Food.WatchOnYouTubeLink"]
            </a>
        }
    </div>
</article>

@code {
	[Parameter, EditorRequired]
	public RecipeModel Recipe { get; set; } = null!;

	[Parameter, EditorRequired]
	public IReadOnlyDictionary<string, string> Translations { get; set; } = new Dictionary<string, string>();

    private void ToggleInstructions()
    {
        Recipe.ShowFullInstructions = !Recipe.ShowFullInstructions;
        StateHasChanged();
    }
}
